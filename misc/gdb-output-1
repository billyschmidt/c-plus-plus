Current directory is /home/wschmidt22/1902/dstr1/
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wschmidt22/1902/dstr1/test_ordered_string_list...done.
(gdb) help attach
Attach to a process or file outside of GDB.
This command attaches to another target, of the same type as your last
"target" command ("info files" will show your target stack).
The command may take as argument a process id or a device file.
For a process id, you must have permission to send the process a signal,
and it must have the same effective uid as the debugger.
When using "attach" with a process id, the debugger finds the
program running in the process, looking first in the current working
directory, or (if not found there) using the source file search path
(see the "directory" command).  You can also use the "file" command
to specify the program, and to load its symbol table.
(gdb) attach 2349
Attaching to program: /home/wschmidt22/1902/dstr1/test_ordered_string_list, process 2349
Reading symbols from /usr/lib/libstdc++.so.6...(no debugging symbols found)...done.
Loaded symbols for /usr/lib/libstdc++.so.6
Reading symbols from /lib/i686/cmov/libm.so.6...(no debugging symbols found)...done.
Loaded symbols for /lib/i686/cmov/libm.so.6
Reading symbols from /lib/libgcc_s.so.1...(no debugging symbols found)...done.
Loaded symbols for /lib/libgcc_s.so.1
Reading symbols from /lib/i686/cmov/libc.so.6...(no debugging symbols found)...done.
Loaded symbols for /lib/i686/cmov/libc.so.6
Reading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.
Loaded symbols for /lib/ld-linux.so.2
0xb77209fb in std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate) () from /usr/lib/libstdc++.so.6
(gdb) p
The history is empty.
(gdb) up
#1  0xb7740947 in std::ostream::sentry::sentry(std::ostream&) () from /usr/lib/libstdc++.so.6
(gdb) up
#2  0xb7741c85 in std::ostream::put(char) () from /usr/lib/libstdc++.so.6
(gdb) up
#3  0xb7741e33 in std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) () from /usr/lib/libstdc++.so.6
(gdb) up
#4  0xb773fb9f in std::ostream::operator<<(std::ostream& (*)(std::ostream&)) () from /usr/lib/libstdc++.so.6
(gdb) up
#5  0x0804929b in ordered_string_list::operator std::string (this=0xbfbd58cc) at ordered_string_list.cpp:160
(gdb) up
#6  0x0804975e in main () at test_ordered_string_list.cpp:22
(gdb) down
#5  0x0804929b in ordered_string_list::operator std::string (this=0xbfbd58cc) at ordered_string_list.cpp:160
(gdb) p
The history is empty.
(gdb) h
List of classes of commands:

aliases -- Aliases of other commands
breakpoints -- Making program stop at certain points
data -- Examining data
files -- Specifying and examining files
internals -- Maintenance commands
obscure -- Obscure features
running -- Running the program
stack -- Examining the stack
status -- Status inquiries
support -- Support facilities
tracepoints -- Tracing of program execution without stopping the program
user-defined -- User-defined commands

Type "help" followed by a class name for a list of commands in that class.
Type "help all" for the list of all commands.
Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) stack
Undefined command: "stack".  Try "help".
(gdb) help stack
Examining the stack.
The stack is made up of stack frames.  Gdb assigns numbers to stack frames
counting from zero for the innermost (currently executing) frame.

At any time gdb identifies one frame as the "selected" frame.
Variable lookups are done with respect to the selected frame.
When the program being debugged stops, gdb selects the innermost frame.
The commands below can be used to select other frames by number or address.

List of commands:

backtrace -- Print backtrace of all stack frames
bt -- Print backtrace of all stack frames
down -- Select and print stack frame called by this one
frame -- Select and print a stack frame
return -- Make selected stack frame return to its caller
select-frame -- Select a stack frame without printing anything
up -- Select and print stack frame that called this one

Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) frame
#5  0x0804929b in ordered_string_list::operator std::string (this=0xbfbd58cc) at ordered_string_list.cpp:160
(gdb) bt
#0  0xb77209fb in std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate) () from /usr/lib/libstdc++.so.6
#1  0xb7740947 in std::ostream::sentry::sentry(std::ostream&) () from /usr/lib/libstdc++.so.6
#2  0xb7741c85 in std::ostream::put(char) () from /usr/lib/libstdc++.so.6
#3  0xb7741e33 in std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) () from /usr/lib/libstdc++.so.6
#4  0xb773fb9f in std::ostream::operator<<(std::ostream& (*)(std::ostream&)) () from /usr/lib/libstdc++.so.6
#5  0x0804929b in ordered_string_list::operator std::string (this=0xbfbd58cc) at ordered_string_list.cpp:160
#6  0x0804975e in main () at test_ordered_string_list.cpp:22
(gdb) p 5
$1 = 5
(gdb) select 5
(gdb) p
$2 = 5
(gdb) up
#6  0x0804975e in main () at test_ordered_string_list.cpp:22
(gdb) down
#5  0x0804929b in ordered_string_list::operator std::string (this=0xbfbd58cc) at ordered_string_list.cpp:160
(gdb) p current
$3 = (ordered_string_list::node *) 0x9016020
(gdb) p *current
$4 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016014 "one"}}, prev = 0x9016098, next = 0x9016070}
(gdb) p *current->next
$5 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016064 "three"}}, prev = 0x9016048, next = 0x9016020}
(gdb) p *current->next->next
$6 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016014 "one"}}, prev = 0x9016098, next = 0x9016070}
(gdb) p *(current->next->next)
$7 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016014 "one"}}, prev = 0x9016098, next = 0x9016070}
(gdb) p *(current->next)
$8 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016064 "three"}}, prev = 0x9016048, next = 0x9016020}
(gdb) p *(current)
$9 = {val = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x9016014 "one"}}, prev = 0x9016098, next = 0x9016070}
(gdb) q
A debugging session is active.

	Inferior 1 [process 2349] will be detached.

Quit anyway? (y or n) y
Detaching from program: /home/wschmidt22/1902/dstr1/test_ordered_string_list, process 2349
Debugger finished
